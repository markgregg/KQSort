# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew    
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build
    - name: jacoco-reporter
  # You may pin to the exact commit or the version.
  # uses: PavanMudigonda/jacoco-reporter@b16c4987b06b71853a8186d074c87a9144923e4f
  uses: PavanMudigonda/jacoco-reporter@v4.7
  with:
    # Path to the JaCoCo coverage results file which will be used to generate
a report. The only coverage results format supported is the
JaCoCo XML schema.

    coverage_results_path: 
    # Optionally specify the level of output detail for the test results.
May be one of: `none`, `Minimal`, `normal`, `detailed`, `diagnostic`
The default is `normal`.

    output_level: # optional
    # GITHUB_TOKEN to authenticate against API calls to attach
report to Workflow Run.

    github_token: # optional
    # If true, will skip attaching the Tests Result report to
the Workflow Run using a Check Run.  Useful if you just
want to produce a Gist-based report via the `gist_name`
and `gist_token` input parameters.

    skip_check_run: # optional
    # Comma-separated list of one or more directories to scan for code 
coverage, relative to the root of the project. Will include all .ps1
and .psm1 files under these directories recursively.

    coverage_paths: # optional
    # The name of the code coverage report object that will be attached
to the Workflow Run.  Defaults to the name
`COVERAGE_RESULTS_<datetime>` where `<datetime>` is in the form
`yyyyMMdd_hhmmss`.

    coverage_report_name: # optional
    # The title of the code coverage report that will be embedded in the
report itself, which defaults to the same as the
`code_coverage_report_name` input.

    coverage_report_title: # optional
    # Minimum allowed coverage percentage as an integer.
    minimum_coverage: # optional
    # Fail the action when the minimum coverage was not met.
    fail_below_threshold: # optional
    # If true, will skip attaching the Tests Result report to the 
Workflow Run using a Check Run. Useful if your report has 65k 
characters that is not accepted by Github REST and GraphQL APIs

    publish_only_summary: # optional
